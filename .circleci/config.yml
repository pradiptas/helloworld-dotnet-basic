version: 2.1

orbs:
  windows: circleci/windows@2.2.0
  aws-ecr: circleci/aws-ecr@4.0.1

jobs:
  test:
    description: Setup and run application tests
    executor:
      name: windows/default
    # docker:
    #   - image: microsoft/dotnet:sdk
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "myWebApp.csproj" }}
      - run:
          name: "Install project dependencies"
          command: dotnet.exe restore
      - save_cache:
          paths:
            - C:\Users\circleci\.nuget\packages
          key: dotnet-packages-v1-{{ checksum "myWebApp.csproj" }}
      - run:
          name: "Run Application Tests"
          command: dotnet.exe test -v n --results-directory:test_coverage --collect:"Code Coverage"
      - run:
          name: "Generate Dummy artifacts"
          command: | 
           mkdir -p /tmp/dummy_dumps
           cp *.html /tmp/dummy_dumps
      - store_artifacts:
          path: /tmp/dummy_dumps
      - run:
          name: "Print Working Directory"
          command: pwd
        
      # - store_test_result:
      #     path: C:\Users\psanyal\Documents\GitHub\helloworld-dotnet-basic\test_result
      
  build:
    description: Build application with Release configuration
    executor:
      name: windows/default
    steps:
      - checkout
      - run:
          name: "Build Application according to some given configuration"
          command: dotnet.exe build --configuration Release
  docker_hub_build_push_image:
    docker:
      - image: microsoft/dotnet:sdk
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build and push Docker image to Docker Hub
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> ${BASH_ENV}
            echo 'export IMAGE_NAME=${CIRCLE_PROJECT_REPONAME}' >> ${BASH_ENV}
            source ${BASH_ENV}
            docker build -t ${DOCKER_LOGIN}/${IMAGE_NAME} -t ${DOCKER_LOGIN}/${IMAGE_NAME}:${TAG} .
            echo ${DOCKER_PWD} | docker login -u ${DOCKER_LOGIN} --password-stdin
            docker push ${DOCKER_LOGIN}/${IMAGE_NAME}
            
workflows:
  build_test_deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - docker_hub_build_push_image:
          requires:
            - build
      - aws-ecr/build_and_push_image:
          region: AWS_REGION
          account-url: AWS_ECR_ACCOUNT_URL
          repo: ${CIRCLE_PROJECT_REPONAME}
          tag: ${CIRCLE_BUILD_NUM}
          requires:
            - build